/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_STUBCLIENT_H_
#define JSONRPC_CPP_STUB_STUBCLIENT_H_

#include <jsonrpccpp/client.h>

class StubClient : public jsonrpc::Client
{
    public:
        StubClient(jsonrpc::IClientConnector &conn, jsonrpc::clientVersion_t type = jsonrpc::JSONRPC_CLIENT_V2) : jsonrpc::Client(conn, type) {}

        Json::Value FileLookUp(const std::string& fhandle, const std::string& filename, const std::string& owner_vsID) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["fhandle"] = fhandle;
            p["filename"] = filename;
            p["owner_vsID"] = owner_vsID;
            Json::Value result = this->CallMethod("FileLookUp",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value GetVote(int content, const std::string& fhandle, const std::string& filename, const std::string& owner_vsID) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["content"] = content;
            p["fhandle"] = fhandle;
            p["filename"] = filename;
            p["owner_vsID"] = owner_vsID;
            Json::Value result = this->CallMethod("GetVote",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value CommitOrAbort(const std::string& action, int content, const std::string& fhandle, const std::string& filename, const std::string& owner_vsID) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["action"] = action;
            p["content"] = content;
            p["fhandle"] = fhandle;
            p["filename"] = filename;
            p["owner_vsID"] = owner_vsID;
            Json::Value result = this->CallMethod("CommitOrAbort",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
};

#endif //JSONRPC_CPP_STUB_STUBCLIENT_H_
